apiVersion: maistra.io/v2
kind: ServiceMeshControlPlane
metadata:
  name: {{ .Values.serviceMeshControlPlane.name }}
  namespace: {{ include "helm-chart.namespace" .}}
spec:
  general:
    logging:
      logAsJSON: {{ .Values.general.logging.logAsJSON }}
    validationMessages: {{ .Values.general.validationMessages }}
  techPreview:
    global:
      proxy:
        holdApplicationUntilProxyStarts: {{ .Values.techPreview.global.proxy.holdApplicationUntilProxyStarts }}
  security:
    dataPlane:
      mtls: {{ .Values.security.dataPlane.mtls }}
    controlPlane:
      mtls: {{ .Values.security.controlPlane.mtls }}
      tls:
        minProtocolVersion: {{ .Values.security.controlPlane.tls.minProtocolVersion }}
  tracing:
    sampling: {{ .Values.tracing.sampling }}
    type: {{ .Values.tracing.type }}
  profiles:
    - {{ .Values.profiles.default }}
  proxy:  ## used for the istion proxy on the workload
    accessLogging: 
      file: 
        name: {{ .Values.proxy.accessLogging.file.name }}
    networking:
      trafficControl:
        outbound:
          policy: {{ .Values.proxy.networking.trafficControl.outbound.policy }}
    runtime:
      container:
        resources:
          limits:
            cpu: {{ .Values.proxy.runtime.container.resources.limits.cpu }}
            memory: {{ .Values.proxy.runtime.container.resources.limits.memory }}
          requests:
            cpu: {{ .Values.proxy.runtime.container.resources.requests.cpu }}
            memory: {{ .Values.proxy.runtime.container.resources.requests.memory }}
  gateways:
    egress:
      volumes:
        - volume:
            configMap:
              name: config-trusted-cabundle
              optional: false
          volumeMount:
            mountPath: "/etc/istio/achmea-ca-certs"
            name: config-trusted-cabundle
            readOnly: true
      enabled: {{ .Values.gateways.egress.enabled }}
      service:
        type: LoadBalancer
        metadata:
          annotations:
            service.beta.kubernetes.io/azure-load-balancer-internal: 'true'
      runtime:
        deployment: 
          autoScaling:
            enabled: {{ .Values.gateways.egress.runtime.deployment.autoScaling.enabled }}
            minReplicas: {{ .Values.gateways.egress.runtime.deployment.autoScaling.minReplicas }}
            maxReplicas: {{ .Values.gateways.egress.runtime.deployment.autoScaling.maxReplicas }}
            targetCPUUtilizationPercentage: {{ .Values.gateways.egress.runtime.deployment.autoScaling.targetCPUUtilizationPercentage }}
        container:
          resources:
            limits:
              cpu: {{ .Values.gateways.egress.runtime.container.resources.limits.cpu }}
              memory: {{ .Values.gateways.egress.runtime.container.resources.limits.memory }}
            requests:
              cpu: {{ .Values.gateways.egress.runtime.container.resources.requests.cpu }}
              memory: {{ .Values.gateways.egress.runtime.container.resources.requests.memory }}
        pod:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 1
                preference:
                  matchExpressions:
                  - key: topology.kuberneters.io/zone
                    operator: Exists
    ingress:
      enabled: {{ .Values.gateways.ingress.enabled }}
      service:
        type: LoadBalancer
        metadata:
          annotations:
            service.beta.kubernetes.io/azure-load-balancer-internal: 'true'
      runtime:
        deployment: 
          autoScaling:
            enabled: {{ .Values.gateways.ingress.runtime.deployment.autoScaling.enabled }}
            minReplicas: {{ .Values.gateways.ingress.runtime.deployment.autoScaling.minReplicas }}
            maxReplicas: {{ .Values.gateways.ingress.runtime.deployment.autoScaling.maxReplicas }}
            targetCPUUtilizationPercentage: {{ .Values.gateways.ingress.runtime.deployment.autoScaling.targetCPUUtilizationPercentage }}
        container:
          resources:
            limits:
              cpu: {{ .Values.gateways.ingress.runtime.container.resources.limits.cpu }}
              memory: {{ .Values.gateways.ingress.runtime.container.resources.limits.memory }}
            requests:
              cpu: {{ .Values.gateways.ingress.runtime.container.resources.requests.cpu }}
              memory: {{ .Values.gateways.ingress.runtime.container.resources.requests.memory }}
        pod:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 1
                preference:
                  matchExpressions:
                  - key: topology.kuberneters.io/zone
                    operator: Exists
    openshiftRoute:
      enabled: {{ .Values.gateways.openshiftRoute.enabled }}
  policy:
    type: {{ .Values.policy.type }}
  addons:
    grafana:
      enabled: {{ .Values.addons.grafana.enabled }}
    jaeger:
      install:
        ingress:
          enabled: {{ .Values.addons.jaeger.install.ingress.enabled }}
        storage:
          type: {{ .Values.addons.jaeger.install.storage.type }}
          elasticsearch:
            nodeCount: {{ .Values.addons.jaeger.install.storage.elasticsearch.nodeCount }}
            redundancyPolicy: {{ .Values.addons.jaeger.install.storage.elasticsearch.redundancyPolicy }}
            storage:
              size: "{{ .Values.addons.jaeger.install.storage.elasticsearch.storage.size }}"
              esIndexCleaner:
                enabled: {{ .Values.addons.jaeger.install.storage.elasticsearch.storage.esIndexCleaner.enabled }}
                numberOfDays: {{ .Values.addons.jaeger.install.storage.elasticsearch.storage.esIndexCleaner.numberOfDays }}
                schedule: "{{ .Values.addons.jaeger.install.storage.elasticsearch.storage.esIndexCleaner.schedule }}"

    kiali:
      enabled: {{ .Values.addons.kiali.enabled }}
      install:
        service:
          ingress:
            enabled: {{ .Values.addons.kiali.install.service.ingress.enabled }}
    prometheus:
      enabled: {{ .Values.addons.prometheus.enabled }}
      install:
        service:
          ingress:
            enabled: {{ .Values.addons.prometheus.install.service.ingress.enabled }}
  version: {{ .Values.version }}
  runtime:
    components:
      tracing.jaeger.elasticsearch:
        container:
          resources:
            requests:
              memory: "{{ .Values.runtime.components.tracing.jaeger.elasticsearch.container.resources.requests.memory }}"
              cpu: "{{ .Values.runtime.components.tracing.jaeger.elasticsearch.container.resources.requests.cpu }}"
            limits:
              memory: "{{ .Values.runtime.components.tracing.jaeger.elasticsearch.container.resources.limits.memory }}"
              cpu: "{{ .Values.runtime.components.tracing.jaeger.elasticsearch.container.resources.limits.cpu }}"
      pilot:
        deployment: 
          autoScaling:
            enabled: {{ .Values.runtime.components.pilot.deployment.autoScaling.enabled }}
            minReplicas: {{ .Values.runtime.components.pilot.deployment.autoScaling.minReplicas }}
            maxReplicas: {{ .Values.runtime.components.pilot.deployment.autoScaling.maxReplicas }}
            targetCPUUtilizationPercentage: {{ .Values.runtime.components.pilot.deployment.autoScaling.targetCPUUtilizationPercentage }}
        container:
          resources:
            limits:
              cpu: {{ .Values.runtime.components.pilot.container.resources.limits.cpu }}
              memory: {{ .Values.runtime.components.pilot.container.resources.limits.memory }}
            requests:
              cpu: {{ .Values.runtime.components.pilot.container.resources.requests.cpu }}
              memory: {{ .Values.runtime.components.pilot.container.resources.requests.memory }}
      prometheus:
        container:
          resources:
            limits:
              cpu: {{ .Values.runtime.components.prometheus.container.resources.limits.cpu }}
              memory: {{ .Values.runtime.components.prometheus.container.resources.limits.memory }}
            requests:
              cpu: {{ .Values.runtime.components.prometheus.container.resources.requests.cpu }}
              memory: {{ .Values.runtime.components.prometheus.container.resources.requests.memory }}
      kiali:
        pod:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 1
                preference:
                  matchExpressions:
                  - key: topology.kuberneters.io/zone
                    operator: Exists
    defaults:
      container:
        resources:
          limits:
            cpu: {{ .Values.runtime.defaults.container.resources.limits.cpu }}
            memory: {{ .Values.runtime.defaults.container.resources.limits.memory }}
          requests:
            cpu: {{ .Values.runtime.defaults.container.resources.requests.cpu }}
            memory: {{ .Values.runtime.defaults.container.resources.requests.memory }}      
  telemetry:
    type: {{ .Values.telemetry.type }}

